"-----PATHOGEN MOD----"
"Must always load pathogen first"
execute pathogen#infect()
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

setlocal spell spelllang=en_us    " Set Spelling
set nocompatible                  " Don't care about vi
set encoding=utf-8
filetype off                      " Set filetype stuff to on
filetype plugin indent off
filetype plugin indent on
syntax on                         " Switch on syntax highlighting

"Settings
let mapleader = ","
let maplocalleader = "\\"

" Presentation Settings
set number       " Set Line numbering
set tabstop=2    " Tabstops are 4 spaces
set shiftwidth=2 " Number of spaces for indent
set nowrap       " Do not wrap words (view)
set textwidth=0  " Do not wrap word (insert)
set showcmd      " Show the current command in the lower right corner
set showmode     " Show the current mode
set showmatch    " Show matching brackets.
set ruler        " Line and column number of the cursor positions
set visualbell   " use visual bell instead of beeps
set wildmenu     " Make the command-line completion better
set scrolloff=8  " Keep the cursor 8 lines from the bottom when scolling
set linespace=3  " Larger Line Height
set go-=T        " Hides MacVim toolbar
set hidden       " Set Hidden for LustyExplorer
set backspace=indent,eol,start

" Behaviours
"au FocusLost * :wa				" This means whenever Vim loses focus, it saves the files in the buffer
set history=100					" Keep some stuff in the history
set nobackup					" Stop Vim making back up files
set noswapfile
set clipboard=unnamed			" Anything copied will be in the clipboard

" Search Settings
set incsearch					" Incrementally match the search
set hlsearch					" Enable search highlighting
set ignorecase					" set the search scan so that it ignores case when the search is all lower
set smartcase					" case but recognizes uppercase if it's specified

" setting autoindenting for all filetypes
set autoindent
" setting the indenting width for html, xml and php files (you can add more)
autocmd FileType html,xml,php setlocal expandtab shiftwidth=2 tabstop=2
" indent the whole file and return to original position
nmap ,= mzgg=G\`z

" KeyBindings
" Clear search when you press ,/
nmap <leader>/ :nohlsearch<CR>

" leader w to save 
nmap <leader>ww :w<CR>
nmap <leader>wq :wq<CR>

"Change window key remap
nmap <leader>w <C-w>w 
noremap <silent> <C-j> <C-W>j
noremap <silent> <C-k> <C-W>k
noremap <silent> <C-h> <C-W>h
noremap <silent> <C-l> <C-W>l

" Edit the vimrc file
nmap <leader>ev :e $MYVIMRC<CR>
nmap <leader>sv :so $MYVIMRC<CR>

" Sparkup
"let g:sparkup='sparkup'
"let g:sparkupArgs='--no-last-newline'
"let g:sparkupExecuteMapping='<c-e>'
"let g:sparkupNextMapping= ''
" Snipmate Reload
nmap <leader>r :call ReloadAllSnippets()<CR>

" ZenCoding
let g:user_zen_expandabbr_key = '<c-e>'
let g:use_zen_complete_tag = 1

" NerdTree
nmap ,nt :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
"let NERDTreeShowHidden=1
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p

" Gundo
nnoremap <F5> :GundoToggle<CR>

" Nerdcommenter
nmap <leader>, :call NERDComment(0, "invert")<CR>
vmap <leader>, :call NERDComment(0, "invert")<CR>

" Auto set filetype for PHP.HTML
au BufRead *.php set ft=php.html
au BufNewFile *.php set ft=php.html
autocmd BufNewFile,BufRead *.json set ft=javascript 

" Auto set filetype for PHP.HTML
au BufRead,BufNewFile *.ctp set ft=php.html

" Auto set filetype for html.erb
au BufRead *.html.erb set ft=html.eruby
au BufNewFile *.html.erb set ft=html.eruby

" Auto set file type for css
au BufRead *.css set omnifunc=csscomplete
au BufNewFile *.css set omnifunc=csscomplete 

" Surround : Plugin keybinding
let g:surround_37 = "<% \r %>" " press % 
let g:surround_61 = "<%= \r %>" " press = 
autocmd FileType php.html let b:surround_45 = "<?php \r ?>" "press - 

" CTRL P = Jumping through open buffers
:nmap ; :CtrlPBuffer<CR>

" CoffeeScript Plugin
"au BufWritePost *.coffee silent CoffeeMake!

" GUI and Colorscheme
if has("gui_running")
	set guifont=Menlo\ for\ Powerline:h12
	colorscheme desert
	winpos 0 0
	winsize 190 45
else	
	colorscheme solarized
	set background =dark
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
	if exists('$TMUX')
		let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
		let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
	else
		let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		let &t_EI = "\<Esc>]50;CursorShape=0\x7"
	endif
endif

" use aesthetic middle of screen for "zz"
nnoremap <silent> zz :exec "normal! zz" . float2nr(winheight(0)*0.1) . "\<Lt>C-E>"<CR>
